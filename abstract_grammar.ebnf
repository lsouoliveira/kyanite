module = { statement };

statement = simple_stmt newline
          | compound_stmt newline
          | newline ;

simple_stmt = expression ;

compound_stmt = function_def
              | if_stmt
              | import_stmt
              | while_stmt
              | break_stmt
              | class_def ;

import_stmt = "import" identifier
while_stmt = while expression NEWLINE block "end" ;
break_stmt = break ;

function_def = "def" identifier "(" { params } ")" NEWLINE block "end" ;

if_stmt = "if" expression NEWLINE block NEWLINE "end" ;
class_def = "class" ( "(" ( params ) ")" ) identifier NEWLINE block "end" ;

# Expressions

expression = comparison ;
comparison = sum { compare_op } 
           | sum ;
compare_op = eq ;
eq = "==" sum ;

sum = sum "+" primary
    | sum "-" primary
    | primary

primary = primary "." identifier
        | primary "(" arguments "}"
        | atom ;

atom = identifier

arguments = { expression }

params = { parameter }
parameter = param ","
          | param
param = identifier

literal = ...

identifier = (letter | "_"), { letter | digit | "_" } ;
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
letter = uppercase and lowercase alphabet letters ; 

newline = "\n" ;
