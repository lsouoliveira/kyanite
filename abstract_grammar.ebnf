module = { statement };

statement = simple_stmt newline
          | compound_stmt newline
          | newline ;

simple_stmt = expression ;

expression = variable
           | assignment
           | method_call
           | binary_expr
           | unary_expr ;

compound_stmt = function_def
              | class_def ;

function_def = "def" identifier "(" { params } ")" NEWLINE block "end" ;

class_def = "class" identifier NEWLINE block "end" ;

method_call = primary "(" params "}" ;

variable = primary ;
primary = primary "." identifier
        | atom ;

atom = identifier

params = { parameter }
parameter = param ","
          | param
param = identifier

literal = ...

identifier = (letter | "_"), { letter | digit | "_" } ;
digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;
letter = uppercase and lowercase alphabet letters ; 

newline = "\n" ;
